using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows.Forms;
using Microsoft.Build.Evaluation;
using LateralPanelD = Geex.Edit.UeF.MainForm.LateralPanel;
namespace Geex.Edit.UeF.MainForm
{
    /// <summary>
    /// Class handling the controls of the main form.
    /// This class manages controls and receives events from them.
    /// WARNING :
    /// This manages ONLY the Windows Forms part of the main Window.
    /// The events generated by the Xna context are handled within the MapView
    /// </summary>
    public class UIHandler : Common.MainForm.IUIManager
    {
        /* ------------------------------------------------------------
         * VARIABLES
         * ----------------------------------------------------------*/
        #region Variables
        LateralPanelD m_lateralPanel;
        ToolStrip m_toolStrip;
        ToolStripStatusLabel m_zoomStatus;
        ToolStripComboBox m_zoomCombo;
        /// <summary>
        /// Stores the tool bar buttons
        /// </summary>
        Dictionary<string, ToolStripButton> m_toolBarButtons = new Dictionary<string, ToolStripButton>();
        #endregion
        /* ---------------------------------------------------------------------
         * Properties
         * --------------------------------------------------------------------*/
        #region Properties
        /// <summary>
        /// Returns the game object picker instance.
        /// </summary>
        public GameObjectPicker GameObjectPicker
        {
            get { return m_lateralPanel.GameObjectPicker; }
        }
        #endregion
        /* ---------------------------------------------------------------------
         * Methods
         * --------------------------------------------------------------------*/
        #region Methods
        /// <summary>
        /// Constructor
        /// </summary>
        public UIHandler()
        {

        }
        /* ---------------------------------------------------------------------
         * Init
         * --------------------------------------------------------------------*/
        #region Init
        /// <summary>
        /// Initializes the events that depends on the other components
        /// </summary>
        public void InitEvents()
        {
            UeFGlobals.MapView.GraphicsManager.RenderOptions.ZoomChanged += new Graphics.RenderOptions.ZoomChangedDelegate(UpdateZoom);
            UeFGlobals.Controler.MacroRecorder.StackUpdated += new Geex.Edit.Common.Tools.StackUpdatedDelegate(Controler_StackUpdated);
        }

        
        /// <summary>
        /// Initializes the controls of the main window.
        /// </summary>
        /// <param name="container"></param>
        public void InitControls(Control container)
        {
            // Creates the lateral panel
            m_lateralPanel = new LateralPanelD(container);
            // Initializes toolbar
            InitToolbar();
            InitStatusBar();
        }

        /// <summary>
        /// Initializes the status bar
        /// </summary>
        void InitStatusBar()
        {
            // Adds some status strips
            m_zoomStatus = new ToolStripStatusLabel("Zoom : ");
            m_zoomStatus.Width = 100;
            Common.Globals.MainForm.StatusBar.Items.Add(m_zoomStatus);
        }

        /// <summary>
        /// Initializes the toolbar
        /// </summary>
        void InitToolbar()
        {
            // Container of the toolstrip
            ToolStripContainer container = ((Common.MainForm.MainFormClass)Common.Globals.MainForm).MainToolStripContainer;
            // Tools strip creation
            ToolStrip tb = new ToolStrip();
            // Image list
            tb.ImageList = new ImageList();
            tb.ImageList.ImageSize = new System.Drawing.Size(20, 20);
            tb.ImageList.Images.Add(Common.AppRessources.RessourceSystemBitmap("pen.png")); // 0
            tb.ImageList.Images.Add(Common.AppRessources.RessourceSystemBitmap("rect.png")); // 1
            tb.ImageList.Images.Add(Common.AppRessources.RessourceSystemBitmap("shadow-inactive.png")); // 2
            tb.ImageList.Images.Add(Common.AppRessources.RessourceSystemBitmap("show-active-only.png")); // 3
            tb.ImageList.Images.Add(Common.AppRessources.RessourceSystemBitmap("undo.png")); // 4
            tb.ImageList.Images.Add(Common.AppRessources.RessourceSystemBitmap("redo.png")); // 5
            tb.ImageList.Images.Add(Common.AppRessources.RessourceSystemBitmap("floodfill.png")); // 6
            tb.ImageList.Images.Add(Common.AppRessources.RessourceSystemBitmap("save.png")); // 7
            tb.ImageList.Images.Add(Common.AppRessources.RessourceSystemBitmap("database-icon.png")); // 8
            tb.ImageList.Images.Add(Common.AppRessources.RessourceSystemBitmap("list.bmp")); // 9
            tb.ImageList.Images.Add(Common.AppRessources.RessourceSystemBitmap("compile.png")); // 10
            tb.ImageList.Images.Add(Common.AppRessources.RessourceSystemBitmap("compile.png")); // 11
            tb.ImageList.Images.Add(Common.AppRessources.RessourceSystemBitmap("zoom1.png")); // 12
            // -------- Setup buttons
            // Save / Load
            ToolStripButton save = new ToolStripButton();
            save.ImageIndex = 7;
            save.Enabled = true;
            save.Click += new EventHandler(OnSave);
            tb.Items.Add(save);

            // Separator
            tb.Items.Add(new ToolStripSeparator());

            // Test the game
            ToolStripButton test = new ToolStripButton();
            test.ImageIndex = 3;
            test.Click += new EventHandler(OnLaunchGame);
            tb.Items.Add(test);

            // ---------------------------------------------------------------------
            // MapView buttons
            // Undo / Redo
            ToolStripButton undo = new ToolStripButton();
            undo.ImageIndex = 4;
            undo.Enabled = UeFGlobals.Controler.MacroRecorder.CanUndo();
            tb.Items.Add(undo);
            m_toolBarButtons.Add("undo", undo);

            ToolStripButton redo = new ToolStripButton();
            redo.ImageIndex = 5;
            redo.Enabled = UeFGlobals.Controler.MacroRecorder.CanRedo();
            tb.Items.Add(redo);
            m_toolBarButtons.Add("redo", redo);

            // Separator
            tb.Items.Add(new ToolStripSeparator());
            // Indicates if the mode is set to drawing :
            bool drawing = UeFGlobals.Controler.State.Mode == MapView.ControlerMode.Tile;
            // Pen drawing mode
            ToolStripButton drawModePen = new ToolStripButton();
            drawModePen.ImageIndex = 0;
            //drawModePen.CheckOnClick = true;
            drawModePen.Checked = drawing && UeFGlobals.Controler.State.DrawMode == MapView.DrawMode.Pen;
            tb.Items.Add(drawModePen);
            m_toolBarButtons.Add("pen", drawModePen);
            // Rect drawing mode
            ToolStripButton drawModeRect = new ToolStripButton();
            drawModeRect.ImageIndex = 1;
            //drawModeRect.CheckOnClick = true;
            drawModeRect.Checked = drawing && UeFGlobals.Controler.State.DrawMode == MapView.DrawMode.Rectangle;
            tb.Items.Add(drawModeRect);
            m_toolBarButtons.Add("rect", drawModeRect);
            // Floodfill drawing mode
            ToolStripButton drawModeFill = new ToolStripButton();
            drawModeFill.ImageIndex = 6;
            //drawModeFill.CheckOnClick = true;
            drawModeFill.Checked = drawing && UeFGlobals.Controler.State.DrawMode == MapView.DrawMode.FloodFill;
            tb.Items.Add(drawModeFill);
            m_toolBarButtons.Add("floodfill", drawModeFill);
            // Events
            ToolStripButton eventMode = new ToolStripButton();
            eventMode.Checked = !drawing;
            eventMode.ImageIndex = 10;
            m_toolBarButtons.Add("eventMode", eventMode);
            eventMode.Click += new EventHandler(OnToggleEventMode);
            tb.Items.Add(eventMode);

            // Separator
            tb.Items.Add(new ToolStripSeparator());

            // Grey inactive layers
            ToolStripButton greyInactive = new ToolStripButton();
            //greyInactive.CheckOnClick = true;
            greyInactive.ImageIndex = 2;
            greyInactive.Checked = UeFGlobals.MapView.GraphicsManager.RenderOptions.GreyInactiveLayers;
            tb.Items.Add(greyInactive);
            m_toolBarButtons.Add("greyInactive", greyInactive);

            // Show active and lower
            ToolStripButton showActiveAndLowerOnly = new ToolStripButton();
            //showActiveAndLowerOnly.CheckOnClick = true;
            showActiveAndLowerOnly.ImageIndex = 3;
            showActiveAndLowerOnly.Checked = UeFGlobals.MapView.GraphicsManager.RenderOptions.ShowActiveAndLowerOnly;
            tb.Items.Add(showActiveAndLowerOnly);
            m_toolBarButtons.Add("showActiveAndLowerOnly", showActiveAndLowerOnly);

            // Separator
            tb.Items.Add(new ToolStripSeparator());

            // -------- Setup layers buttons
            // Layers
            for (int id = 0; id < Project.GameOptions.NumberOfLayers; id++)
            {
                tb.ImageList.Images.Add("layer" + id.ToString(), Common.AppRessources.RessourceSystemBitmap("couche" + (id + 1).ToString() + ".png"));
                m_toolBarButtons["layer" + id.ToString()] = new ToolStripButton();
                //m_toolBarButtons["layer" + id.ToString()].CheckOnClick = true;
                m_toolBarButtons["layer" + id.ToString()].ImageKey = "layer" + id.ToString();
                tb.Items.Add(m_toolBarButtons["layer" + id.ToString()]);
                m_toolBarButtons["layer" + id.ToString()].Checked = UeFGlobals.MapView.GraphicsManager.RenderOptions.ActiveLayer == id;
            }
            // Separator
            tb.Items.Add(new ToolStripSeparator());

            // Zoom
            ToolStripLabel zoomLabel = new ToolStripLabel("Zoom : ");
            tb.Items.Add(zoomLabel);

            ToolStripComboBox zoomBtn = new ToolStripComboBox();
            zoomBtn.Items.AddRange(new string[] { "12.5%", "25%", "50%", "100%", "200%" });
            zoomBtn.Text = ((int)(UeFGlobals.MapView.GraphicsManager.RenderOptions.Zoom * 100)).ToString() + "%";
            zoomBtn.DropDownStyle = ComboBoxStyle.DropDownList;
            zoomBtn.Size = new System.Drawing.Size(50, zoomBtn.Size.Height);
            zoomBtn.SelectedIndexChanged += new EventHandler(OnZoomClicked);
            m_zoomCombo = zoomBtn;
            tb.Items.Add(zoomBtn);

            
            /*// -------- Setup zoom buttons
            for (int id = 0; id < Graphics.RenderOptions.MaxZoom; id++)
            {
                tb.ImageList.Images.Add("zoom" + id.ToString(), Common.AppRessources.RessourceSystemBitmap("zoom" + ((int)Math.Pow(2, id)).ToString() + ".png"));
                m_toolBarButtons["zoom" + id.ToString()] = new ToolStripButton();
                //m_toolBarButtons["zoom" + id.ToString()].CheckOnClick = true;
                m_toolBarButtons["zoom" + id.ToString()].ImageKey = "zoom" + id.ToString();
                tb.Items.Add(m_toolBarButtons["zoom" + id.ToString()]);
                m_toolBarButtons["zoom" + id.ToString()].Checked = UeFGlobals.MapView.GraphicsManager.RenderOptions.Zoom == ((int)Math.Pow(2, id));
            }*/

            // -------- Build
            ToolStripButton buildBtn = new ToolStripButton("Build");
            buildBtn.Click += delegate(object sender, EventArgs e)
            {
                BuildGame();
            };
            buildBtn.ImageIndex = 10;
            tb.Items.Add(buildBtn);
            // -------- Build
            ToolStripButton runBtn = new ToolStripButton("Run");
            runBtn.Click += delegate(object sender, EventArgs e)
            {
                RunGame();
            };
            runBtn.ImageIndex = 10;
            tb.Items.Add(runBtn);
            // --------- Database
            tb.Items.Add(new ToolStripSeparator());
            ToolStripButton tilesetBtn = new ToolStripButton("Tilesets");
            tilesetBtn.Click += delegate(object sender, EventArgs e)
            {
                Views.TilesetsForm form = new Views.TilesetsForm();
                form.InitializeControls();
                form.ShowDialog();
            };
            tb.Items.Add(tilesetBtn);
            // -------- Ressources
            ToolStripButton resBtn = new ToolStripButton("Ressources");
            resBtn.Click += delegate(object sender, EventArgs e)
            {
                RessourcesManagerForm form = new RessourcesManagerForm();
                form.ShowDialog();
            };
            tb.Items.Add(resBtn);
            // -------- Finalizing
            tb.ItemClicked += new ToolStripItemClickedEventHandler(OnToolbarButtonClicked);
            tb.RenderMode = ToolStripRenderMode.ManagerRenderMode;
            // Adds the toolstrip into the container and then the container into the forms controls
            container.TopToolStripPanel.Controls.Add(tb);
            container.TopToolStripPanelVisible = true;

            m_toolStrip = tb;
        }

        /// <summary>
        /// Appelé lorsque le zoom change.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void OnZoomClicked(object sender, EventArgs e)
        {
            UeFGlobals.MapView.GraphicsManager.RenderOptions.Zoom = float.Parse(m_zoomCombo.Text.Replace("%", "").Replace('.', ',')) / 100.0f;
            UeFGlobals.MapView.IsDirty = true;
            UeFGlobals.MapView.RefreshMap();
        }
        #region Toolbar
        /// <summary>
        /// Produced when a toolbar button is clicked.
        /// </summary>
        void OnToolbarButtonClicked(object sender, ToolStripItemClickedEventArgs e)
        {
            CheckUndoRedoClick(e);
            CheckDrawModeClick(e);
            CheckLayerClick(e);
            if (e.ClickedItem == m_toolBarButtons["greyInactive"])
            {
                ((ToolStripButton)e.ClickedItem).Checked = !((ToolStripButton)e.ClickedItem).Checked;
                UeFGlobals.MapView.GraphicsManager.RenderOptions.GreyInactiveLayers = ((ToolStripButton)e.ClickedItem).Checked;
                UeFGlobals.MapView.IsDirty = true;
            }
            if (e.ClickedItem == m_toolBarButtons["showActiveAndLowerOnly"])
            {
                ((ToolStripButton)e.ClickedItem).Checked = !((ToolStripButton)e.ClickedItem).Checked;
                UeFGlobals.MapView.GraphicsManager.RenderOptions.ShowActiveAndLowerOnly = ((ToolStripButton)e.ClickedItem).Checked;
                UeFGlobals.MapView.IsDirty = true;
            }
        }
        /// <summary>
        /// Toggles event mode.
        /// </summary>
        void OnToggleEventMode(object sender, EventArgs e)
        {
            UeFGlobals.MapView.Controler.State.Mode = MapView.ControlerMode.GameObjects;
            UeFGlobals.MapView.IsDirty = true;
            // Unchecks the other buttons.
            m_toolBarButtons["eventMode"].Checked = true;
            m_toolBarButtons["pen"].Checked = false;
            m_toolBarButtons["rect"].Checked = false;
            m_toolBarButtons["floodfill"].Checked = false;
        }

        /// <summary>
        /// Checks if the undo / redo button are clicked
        /// </summary>
        /// <param name="e"></param>
        void CheckUndoRedoClick(ToolStripItemClickedEventArgs e)
        {
            if (e.ClickedItem == m_toolBarButtons["undo"])
            {
                UeFGlobals.Controler.Undo();
                Common.Globals.MapView.IsDirty = true;
                //e.ClickedItem.Enabled = UeFGlobals.Controler.MacroRecorder.CanUndo();
                //m_toolBarButtons["redo"].Enabled = true;
                UpdateUndoRedoButtonsState();
            }
            if (e.ClickedItem == m_toolBarButtons["redo"])
            {
                UeFGlobals.Controler.Redo();
                Common.Globals.MapView.IsDirty = true;
                UpdateUndoRedoButtonsState();
            }
        }
        /// <summary>
        /// Updates the undo / redo buttons state
        /// </summary>
        public void UpdateUndoRedoButtonsState()
        {
            m_toolBarButtons["undo"].Enabled = UeFGlobals.Controler.MacroRecorder.CanUndo();
            m_toolBarButtons["redo"].Enabled = UeFGlobals.Controler.MacroRecorder.CanRedo();
        }
        

        /// <summary>
        /// Called when the stacks of the macro recorder are updated.
        /// </summary>
        public void Controler_StackUpdated()
        {
            UpdateUndoRedoButtonsState();
        }
        /// <summary>
        /// Checks if the buttons affecting the selected layer are pressed.
        /// </summary>
        /// <param name="e"></param>
        void CheckLayerClick(ToolStripItemClickedEventArgs e)
        {
            for (int id = 0; id < Project.GameOptions.NumberOfLayers; id++)
            {
                if (e.ClickedItem == m_toolBarButtons["layer" + id.ToString()])
                {
                    UeFGlobals.MapView.GraphicsManager.RenderOptions.ActiveLayer = id;
                    // Unchecks all the over buttons
                    for (int id2 = 0; id2 < Project.GameOptions.NumberOfLayers; id2++)
                    {
                        if (id2 != id)
                            m_toolBarButtons["layer" + id2.ToString()].Checked = false;
                        else
                            m_toolBarButtons["layer" + id2.ToString()].Checked = true;
                    }
                    Common.Globals.MapView.IsDirty = true;
                }

            }
        }
        /// <summary>
        /// Checks if the buttons affecting the selected zoom are pressed.
        /// </summary>
        /// <param name="e"></param>
        void CheckZoomClick(ToolStripItemClickedEventArgs e)
        {
            for (int id = 0; id < Graphics.RenderOptions.MaxZoom; id++)
            {
                if (e.ClickedItem == m_toolBarButtons["zoom" + id.ToString()])
                {
                    int zoom = ((int)Math.Pow(2, id));
                    UeFGlobals.MapView.GraphicsManager.RenderOptions.Zoom = zoom;
                    // Unchecks all the over buttons
                    for (int id2 = 0; id2 < Graphics.RenderOptions.MaxZoom; id2++)
                    {
                        if (id2 != id)
                            m_toolBarButtons["zoom" + id2.ToString()].Checked = false;
                        else
                            m_toolBarButtons["zoom" + id2.ToString()].Checked = true;
                    }
                    UeFGlobals.MapView.IsDirty = true;
                    UeFGlobals.MapView.RefreshMap();
                }
            }
        }
        /// <summary>
        /// Checks if the buttons affecting the draw mode are pressed.
        /// </summary>
        /// <param name="e"></param>
        void CheckDrawModeClick(ToolStripItemClickedEventArgs e)
        {
            
            
            // Pen
            if (e.ClickedItem == m_toolBarButtons["pen"])
            {
                UeFGlobals.MapView.Controler.State.Mode = MapView.ControlerMode.Tile;
                m_toolBarButtons["eventMode"].Checked = false;
                UeFGlobals.Controler.State.DrawMode = MapView.DrawMode.Pen;
                if (m_toolBarButtons["pen"].Checked) // The button is now pushed
                {
                    m_toolBarButtons["rect"].Checked = false;
                    m_toolBarButtons["floodfill"].Checked = false;
                }
                else
                {
                    m_toolBarButtons["pen"].Checked = true;
                    m_toolBarButtons["rect"].Checked = false;
                    m_toolBarButtons["floodfill"].Checked = false;
                }
            }
            // Rect
            else if (e.ClickedItem == m_toolBarButtons["rect"])
            {
                UeFGlobals.MapView.Controler.State.Mode = MapView.ControlerMode.Tile;
                m_toolBarButtons["eventMode"].Checked = false;
                UeFGlobals.Controler.State.DrawMode = MapView.DrawMode.Rectangle;
                if (m_toolBarButtons["rect"].Checked) // The button is now pushed
                {
                    m_toolBarButtons["pen"].Checked = false;
                    m_toolBarButtons["floodfill"].Checked = false;
                }
                else
                {
                    m_toolBarButtons["rect"].Checked = true;
                    m_toolBarButtons["pen"].Checked = false;
                    m_toolBarButtons["floodfill"].Checked = false;
                }
            }
            else if (e.ClickedItem == m_toolBarButtons["floodfill"])
            {
                UeFGlobals.MapView.Controler.State.Mode = MapView.ControlerMode.Tile;
                m_toolBarButtons["eventMode"].Checked = false;
                UeFGlobals.Controler.State.DrawMode = MapView.DrawMode.FloodFill;
                if (m_toolBarButtons["floodfill"].Checked)
                {
                    m_toolBarButtons["pen"].Checked = false;
                    m_toolBarButtons["rect"].Checked = false;
                }
                else
                {
                    m_toolBarButtons["rect"].Checked = false;
                    m_toolBarButtons["pen"].Checked = false;
                    m_toolBarButtons["floodfill"].Checked = true;
                }
            }
            Common.Globals.MapView.IsDirty = true;
        }
        #endregion
        #endregion
        /* ---------------------------------------------------------------------
         * Events
         * --------------------------------------------------------------------*/
        #region Events
        /// <summary>
        /// Called when the user launches the game
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void OnLaunchGame(object sender, EventArgs e)
        {
            string path = UeFGlobals.Project.GameExecutablePath;
            var process = System.Diagnostics.Process.Start("explorer.exe", 
                System.IO.Path.GetDirectoryName(path));
            process.Close();
        }
        /// <summary>
        /// Runs the game
        /// </summary>
        void RunGame()
        {
            string path = UeFGlobals.Project.GameExecutablePath;
            var process = System.Diagnostics.Process.Start(path);
        }
        /// <summary>
        /// Saves the current project.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        void OnSave(object sender, EventArgs e)
        {
            UeFGlobals.Project.Save();
        }
        /// <summary>
        /// Updates the zoom Status bar
        /// </summary>
        void UpdateZoom(float newValue)
        {
            m_zoomStatus.Text = "Zoom : " + (newValue*100).ToString() + "%";
        }
        /// <summary>
        /// Builds the Game Binaries and Content.
        /// </summary>
        void BuildGame()
        {
            UeFGlobals.Project.Build();
        }

        #endregion
        /* ---------------------------------------------------------------------
         * Dispose
         * --------------------------------------------------------------------*/
        #region Dispose
        /// <summary>
        /// Disposes the elements of this Handler.
        /// </summary>
        public void Dispose()
        {
            this.m_lateralPanel.Dispose();
            // Dispose toolbar
            ((Common.MainForm.MainFormClass)Common.Globals.MainForm).MainToolStripContainer.TopToolStripPanel.Controls.Remove(m_toolStrip);
            m_toolStrip.Dispose();
            // Dispose status bar
            Common.Globals.MainForm.StatusBar.Items.Remove(m_zoomStatus);
            m_zoomStatus.Dispose();
        }

        #endregion
        #endregion
    }
}